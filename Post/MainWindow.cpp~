#include "MainWindow.h"
#include "ui_MainWindow.h"
#include <QDebug>
using std::string; using std::vector;

#include <QFileDialog>

#include <vtkRendererCollection.h>

namespace
{
    class MouseInteractorStyle: public vtkInteractorStyleTrackballCamera
    {
    public:
        static MouseInteractorStyle* New();
        vtkTypeMacro(MouseInteractorStyle, vtkInteractorStyleTrackballCamera);
        MouseInteractorStyle() 
        {
            initialize();
        }

        virtual void OnLeftButtonDown() override
        {
            int *pos = this->Interactor->GetEventPosition();

            vtkSmartPointer<vtkCellPicker> cellPicker = vtkSmartPointer<vtkCellPicker>::New();
            vtkSmartPointer<vtkPropPicker> propPicker = vtkSmartPointer<vtkPropPicker>::New();
            cellPicker->Pick(pos[0], pos[1], 0, this->Interactor->GetRenderWindow()->GetRenderers()->GetFirstRenderer());
            propPicker->Pick(pos[0], pos[1], 0, this->Interactor->GetRenderWindow()->GetRenderers()->GetFirstRenderer());


            if (isAddTextActor && propPicker->GetActor() != nullptr && propPicker->GetActor() != pointActor)
            {
                auto boundaryData = propPicker->GetActor()->GetMapper()->GetInput();
                auto pos = boundaryData->GetPoint(cellPicker->GetPointId());
                std::string pointCoordinates = "Postion: " + std::to_string(pos[0]) + ", " + std::to_string(pos[1]) + ", " + 
                std::to_string(pos[2]) + "\n";

                for (int i = 0; i < parameterNames.size(); i++)
                {
                    // if (i > 0 && i % 6 == 0) pointCoordinates.push_back('\n'); 
                    pointCoordinates += boundaryData->GetPointData()->GetArray(parameterNames[i].c_str())->GetName();
                    pointCoordinates.push_back(':');
                    pointCoordinates += std::to_string(boundaryData->GetPointData()->
                        GetArray(parameterNames[i].c_str())->GetComponent(cellPicker->GetPointId(),0));
                    pointCoordinates.push_back(' ');
                }
                
                
                textActor->SetInput(pointCoordinates.c_str());
                vtkSmartPointer<vtkPointLocator> locate = vtkSmartPointer<vtkPointLocator>::New();
                locate->SetDataSet(boundaryData);
                vtkSmartPointer<vtkIdList> idlist = vtkSmartPointer<vtkIdList>::New();
                locate->FindClosestNPoints(2, pos, idlist);
                
                vtkSmartPointer<vtkMath> math = vtkSmartPointer<vtkMath>::New();
                double point1[3];
                boundaryData->GetPoint(idlist[0].GetId(0), point1);
                double point2[3];
                boundaryData->GetPoint(idlist[0].GetId(1), point2);
                double dis = sqrt(math->Distance2BetweenPoints(point1, point2)) / 3;
            
                auto displayPoint =  vtkSmartPointer<vtkSphereSource>::New();
                displayPoint->SetCenter(pos);
                displayPoint->SetRadius(dis);

                auto mapper = vtkSmartPointer<vtkPolyDataMapper>::New();

                mapper->SetInputConnection(displayPoint->GetOutputPort());
                this->Interactor->GetRenderWindow()->GetRenderers()->GetFirstRenderer()->RemoveActor(pointActor);
                pointActor->SetMapper(mapper);
                this->Interactor->GetRenderWindow()->GetRenderers()->GetFirstRenderer()->AddActor(pointActor);
            }

            vtkInteractorStyleTrackballCamera::OnLeftButtonDown();
        }
        
        void initialize()
        {
            textActor = vtkSmartPointer<vtkTextActor>::New();
            textActor->SetInput("please select a point");
            textActor->GetProperty()->SetColor(0.0,0,0);
            textActor->GetTextProperty()->BoldOn();
            textActor->GetTextProperty()->SetFontSize(18);

            pointActor = vtkSmartPointer<vtkActor>::New();
            pointActor->GetProperty()->SetColor(1.0, 0.0, 0.0);
            pointActor->VisibilityOff();

        }

        vtkSmartPointer<vtkTextActor> textActor = nullptr;
        vtkSmartPointer<vtkActor> pointActor = nullptr;
        std::vector<std::string> parameterNames = {"rho", "u", "v", "w", "P", "tb1"};
        bool isAddTextActor = false;

        vtkSmartPointer<vtkActor> streamLineActor = vtkSmartPointer<vtkActor>::New();
        vtkSmartPointer<vtkActor> glyphActor = vtkSmartPointer<vtkActor>::New();
        vtkDataSet *meshDataSet = nullptr;
        bool hasPoint1Set = false;
        bool hasPoint2Set = false;
        double streamLinePoint1[3];
        double streamLinePoint2[3];
        bool readyToCreateStreamLine = false;
    };
    vtkStandardNewMacro(MouseInteractorStyle);
}

static ::MouseInteractorStyle* style = nullptr;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    InitializeMainWindow();

}

MainWindow::~MainWindow()
{

    delete qtvtkWindow;
    delete ui;
}

void MainWindow::on_actionLoadMesh_triggered()
{
    QString filename = QFileDialog::getOpenFileName(this,"Open File","./",tr("*.grid.hdf"));
    if (filename.length() == 0) 
    {
        cout << "Error choose aes file, please check and try it agian!" << endl;
        return;
    }
    else
    {
        cout << "reading aes grid file " << filename.toStdString() << endl << "please waiting for few seconds!" << endl;
        
        on_actionNewWindow_triggered();

        qtvtkWindow->ReadAesFile(filename.toStdString());
        ui->vtkBox->renderWindow()->Render();
    }
    ResetScrollArea();
    cout << "End Load Mesh" << endl;
    double* bounds = qtvtkWindow->GetModelBounds();
    if (bounds != nullptr) {
        qDebug() << "Outline在X轴上的范围：" << "最小值 = " << bounds[0] << ", 最大值 = " << bounds[1];
    }
}

void MainWindow::on_actionUpdateFlow_triggered()
{
    if (!qtvtkWindow->HasGrid())
    {
        cout << "there is no grid file, please add a grid file first." << endl;
        return;
    }
    QString filename = QFileDialog::getOpenFileName(this,"Open File","./",tr("*.hdf"));
    if (filename.length() == 0 || filename.toStdString().find("flow") == std::string::npos) 
    {
        cout << "Error choose flow file, please check and try it agian!" << endl;
        return;
    }
    qtvtkWindow->UpdateFlow(filename.toStdString());
    disconnect(ui->vectorCheckBox, SIGNAL(stateChanged(int)), this, SLOT(vectorCheckBoxTriggered()));
    ui->vectorCheckBox->setCheckState(Qt::Unchecked);
    connect(ui->vectorCheckBox, SIGNAL(stateChanged(int)), this, SLOT(vectorCheckBoxTriggered()));
    ui->vtkBox->renderWindow()->Render();
    cout << "End Update Flow" << endl;
}

void MainWindow::on_actionNewWindow_triggered()
{
    if (!qtvtkWindow->HasGrid()) 
    {
        cout << "the VTK Box is initialized." << endl;
        return;
    }
    cout << "Initialize the VTK Box" << endl;
    vtkDisplayWindow *newWindow = new vtkDisplayWindow();
    ui->vtkBox->setRenderWindow(newWindow->GetRenderWindow());
    delete qtvtkWindow;
    qtvtkWindow = newWindow;
    ui->vtkBox->renderWindow()->Render();
    if (selectBoundaryDialog != nullptr)
    {
        delete selectBoundaryDialog;
        selectBoundaryDialog = nullptr;
    }
    DisableScrollArea();
}

void MainWindow::on_actionOpenFile_triggered()
{
    QString filename = QFileDialog::getOpenFileName(this,"Open File","./",tr("*.hdf"));
    if (filename.length() == 0 || (filename.toStdString().find("flow") == std::string::npos &&
     filename.toStdString().find("grid") == std::string::npos))
    {
        cout << "Error choose flow file, please check and try it agian!" << endl;
        return;
    }
    if (filename.toStdString().find("flow") != std::string::npos)
    {
        if (!qtvtkWindow->HasGrid())
        {
            cout << "there is no grid file, please add a grid file first." << endl;
            return;
        }
        qtvtkWindow->UpdateFlow(filename.toStdString());
        disconnect(ui->vectorCheckBox, SIGNAL(stateChanged(int)), this, SLOT(vectorCheckBoxTriggered()));
        ui->vectorCheckBox->setCheckState(Qt::Unchecked);
        connect(ui->vectorCheckBox, SIGNAL(stateChanged(int)), this, SLOT(vectorCheckBoxTriggered()));

        ui->vtkBox->renderWindow()->Render();
        cout << "End Update Flow" << endl;
    }
    else if (filename.toStdString().find("grid") != std::string::npos)
    {
        cout << "reading aes grid file " << filename.toStdString() << endl << "please waiting for few seconds!" << endl;
        on_actionNewWindow_triggered();
        qtvtkWindow->ReadAesFile(filename.toStdString());
        ui->vtkBox->renderWindow()->Render();
        ResetScrollArea();
        cout << "End Load Mesh" << endl;
    }
}

void MainWindow::on_actionAddScalarBarActor_triggered()
{
    if (!qtvtkWindow->HasGrid())
    {
        cout << "there is no grid file, please add a grid file first." << endl;
        return;
    }
    if (qtvtkWindow->IsScalarBarWidgetActive())
    {
        qtvtkWindow->InActivateScalarBarWidget();
    }
    else if (!qtvtkWindow->IsScalarBarWidgetActive())
    {
        qtvtkWindow->ActivateScalarBarWidget();
    }
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::on_actionAddAxisActor_triggered()
{
    if (!qtvtkWindow->HasGrid())
    {
        cout << "there is no grid file, please add a grid file first." << endl;
        return;
    }
    if (qtvtkWindow->IsAxiesWidgetActive())
    {
        qtvtkWindow->InActivateAxiesWidget();
    }
    else qtvtkWindow->ActivateAxiesWidget();
    ui->vtkBox->renderWindow()->Render();    
}

void MainWindow::on_actionAddOutlineActor_triggered()
{
    if (!qtvtkWindow->HasGrid())
    {
        cout << "there is no grid file, please add a grid file first." << endl;
        return;
    }
    if (qtvtkWindow->IsOutlineActorVisiable())
    {
        qtvtkWindow->InVisiableOutlineActor();
    }
    else qtvtkWindow->VisiableOutlineActor();
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::on_actionAddPointInformation_triggered()
{
    if (!qtvtkWindow->HasGrid())
    {
        cout << "there is no grid file, please add a grid file first." << endl;
        return;
    }
    if (::style == nullptr)
    {
        ::style = new MouseInteractorStyle();
        cout << "initialize mouse interactor style" << endl;
        ui->vtkBox->interactor()->SetInteractorStyle(::style);
    }
    if (!::style->isAddTextActor)
    {
        ui->vtkBox->renderWindow()->GetRenderers()->GetFirstRenderer()->AddActor2D(::style->textActor);
        ::style->isAddTextActor = true;
        ::style->pointActor->VisibilityOn();
        ui->vtkBox->renderWindow()->Render();
        return;
    }
    if (::style->textActor->GetVisibility())
    {
        ::style->textActor->VisibilityOff();
        ::style->pointActor->VisibilityOff();
        ui->vtkBox->renderWindow()->GetRenderers()->GetFirstRenderer()->RemoveActor(::style->pointActor);
    }
    else
    {
        ::style->textActor->VisibilityOn();
        ::style->pointActor->VisibilityOn();
        ui->vtkBox->renderWindow()->GetRenderers()->GetFirstRenderer()->RemoveActor(::style->pointActor);
        ::style->textActor->SetInput("please select a point");
    }
    ui->vtkBox->renderWindow()->Render();

}

void MainWindow::xoyViewTriggered()
{
    qtvtkWindow->xoyViewRender();
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::xozViewTriggered()
{
    qtvtkWindow->xozViewRender();
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::yozViewTriggered()
{
    qtvtkWindow->yozViewRender();
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::xyzViewTriggered()
{
    qtvtkWindow->xyzViewRender();
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::meshCheckBoxTriggered()
{
    if (!qtvtkWindow->HasGrid()) 
    {
        cout << "there is no grid file, please add a grid file first." << endl;
        return;
    }
    if (ui->meshCheckBox->isChecked())
    {
        qtvtkWindow->AddMeshActor();
    }
    else qtvtkWindow->RemoveMeshActor();
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::contourCheckBoxTriggered()
{
    if (!qtvtkWindow->HasGrid()) 
    {
        cout << "there is no grid file, please add a grid file first." << endl;
        return;
    }
    if (ui->contourCheckBox->isChecked())
    {
        qtvtkWindow->AddContourActor();
        if (ui->shadeCheckBox->isChecked())
        {
            qtvtkWindow->RemoveShadeActor();
        }
    }
    else 
    {
        qtvtkWindow->RemoveContourActor();
        if (ui->shadeCheckBox->isChecked())
        {
            qtvtkWindow->AddShadeActor();
        }
    }
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::shadeCheckBoxTriggered()
{
    if (!qtvtkWindow->HasGrid()) 
    {
        cout << "there is no grid file, please add a grid file first." << endl;
        return;
    }
    if (ui->shadeCheckBox->isChecked())
    {
        if (!ui->contourCheckBox->isChecked())
        {
            qtvtkWindow->AddShadeActor();
        }
    }
    else qtvtkWindow->RemoveShadeActor();
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::edgeCheckBoxTriggered()
{
    if (!qtvtkWindow->HasGrid()) 
    {
        cout << "there is no grid file, please add a grid file first." << endl;
        return;
    }
    if (ui->edgeCheckBox->isChecked())
    {
        qtvtkWindow->AddEdgeActor();
        if (qtvtkWindow->IsOutlineActorVisiable())
        {
            qtvtkWindow->InVisiableOutlineActor();
        }
    }
    else 
    {
        qtvtkWindow->RemoveEdgeActor();
        if (!qtvtkWindow->IsOutlineActorVisiable())
        {
            qtvtkWindow->VisiableOutlineActor();
        }
    }
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::vectorCheckBoxTriggered()
{
    if (!qtvtkWindow->HasVector())
    {
        cout << "create vector, please wait." << endl;
        qtvtkWindow->CreateVelocityActor();
        qtvtkWindow->AddVelocityActor();
    }
    else
    {
        if (ui->vectorCheckBox->checkState() == Qt::Checked)
        {
            qtvtkWindow->AddVelocityActor();
        }
        else qtvtkWindow->RemoveVelocityActor();
    }
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::contourSettingButtonTriggered()
{
    colorBarDialog = new ColorBarDialog(this);
    colorBarDialog->setColorBarDialog(qtvtkWindow->GetFlows(), qtvtkWindow->GetCurFlowNumber());
    connect(colorBarDialog,SIGNAL(finishSetParameters(double,double,int,int)),this, SLOT(setColorBar(double,double,int,int)));
    colorBarDialog->setAttribute(Qt::WA_DeleteOnClose);
    colorBarDialog->setWindowModality(Qt::ApplicationModal);
    colorBarDialog->show();
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::setColorBar(double m, double M, int number, int flowNumber)
{
    qtvtkWindow->SetScalarBar(m,M,number,flowNumber);
    ui->vtkBox->renderWindow()->Render();

    auto plane = qtvtkWindow->ChangeMeridionalFlow(m, M, flowNumber);
    Meridionalrenderer->RemoveAllViewProps();
    for(int i = 0; i < plane.size(); i++)
    {
        Meridionalrenderer->AddActor(plane[i]);
    }
    MeridionalrenderWindow->Render();
}

void MainWindow::vectorSettingButtonTriggered()
{
    if (!qtvtkWindow->HasVector())
    {
        cout << "please add vector first" << endl;
        return;
    }
    scaleFactorDialog = new ScaleFactorDialog(this);
    scaleFactorDialog->setAttribute(Qt::WA_DeleteOnClose);
    scaleFactorDialog->setWindowModality(Qt::ApplicationModal);
    scaleFactorDialog->SetScaleTextEdit(qtvtkWindow->GetScaleFactor());
    scaleFactorDialog->SetVectorComponentsComboBox(qtvtkWindow->GetFlows(),qtvtkWindow->GetVectorComponentsNumber());
    connect(scaleFactorDialog, SIGNAL(SetScaleFactor(double)), this, SLOT(setVectorScaleFactor(double)));
    connect(scaleFactorDialog, SIGNAL(ChangeVectorComponentsNumber(int *)), this, SLOT(createNewVector(int *)));
    scaleFactorDialog->show();
}

void MainWindow::setVectorScaleFactor(double s)
{
    qtvtkWindow->SetVectorScaleFactor(s);
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::createNewVector(int *v)
{
    qtvtkWindow->CreateVelocityActor(v[0], v[1], v[2]);
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::selectBoundaryButtonTriggeded()
{
    //* Test Control Panel
    std::cout << "Control Test "<< std::endl;
    if (controlPanel == nullptr)
    {
        controlPanel = new ControlPanel(this);
        controlPanel->setWindowModality(Qt::NonModal);
        
        // 获取boundary数据并传递给ControlPanel
        auto boundaryData = qtvtkWindow->GetBoundaryDatasets();
        controlPanel->setupTable(boundaryData);
        
        // 连接ControlPanel的boundary控制信号到MainWindow的槽函数
        connect(controlPanel, &ControlPanel::setBoundarys, this, &MainWindow::showBoundaryActor);
        // 连接ControlPanel的cutplane控制信号到MainWindow的槽函数
        connect(controlPanel, &ControlPanel::setCutplaneVisiable, this, &MainWindow::showCutplane);
        connect(controlPanel, &ControlPanel::mainModelTranscluencyChanged, this, &vtkDisplayWindow::setMainModelTransparency);

    }
    
    controlPanel->show();
    
}

void MainWindow::showBoundaryActor(int meshNumber, int boundaryNumber, bool flag)
{
    if (flag) qtvtkWindow->VisiableBoundaryActor(meshNumber, boundaryNumber);
    else
    {
        qtvtkWindow->InVisiableBoundaryActor(meshNumber, boundaryNumber);
    }
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::isoSurfaceCheckBoxTriggered()
{
    if (!qtvtkWindow->HasIsoSurface())
    {
        qtvtkWindow->CreateIsoSurfaceActor();
        qtvtkWindow->AddIsoSurfaceActor();
        ui->vtkBox->renderWindow()->Render();
        return;
    }

    if (ui->isoSurfaceCheckBox->isChecked())
    {
        qtvtkWindow->AddIsoSurfaceActor();
    }
    else qtvtkWindow->RemoveIsoSurfaceActor();
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::isoSurfaceSettingButtonTriggered()
{
    if (!qtvtkWindow->HasIsoSurface()) 
    {
        cout << "please add isosurface actor first" << endl;
        return;
    }
    if (!ui->isoSurfaceCheckBox->isChecked())
    {
        cout << "please show isosurface first" << endl;
        return;
    }
    IsoSurfaceDialog* isoSurfaceDialog = new IsoSurfaceDialog(this);
    isoSurfaceDialog->setAttribute(Qt::WA_DeleteOnClose);
    isoSurfaceDialog->setWindowModality(Qt::ApplicationModal);
    isoSurfaceDialog->setIsoSurfaceDialog(qtvtkWindow->GetFlows(), qtvtkWindow->GetCurFlowNumber() , qtvtkWindow->GetIsoSurfaceFloodNumber(), 
    qtvtkWindow->GetDeriveds().contourFilter->GetValue(0));
    connect(isoSurfaceDialog, SIGNAL(changeFloodParameter(int)), this, SLOT(changeFloodNumber(int)));
    connect(isoSurfaceDialog, SIGNAL(changeFlowParameter(int)), this, SLOT(isoSurfaceChangeFlowNumber(int)));
    connect(isoSurfaceDialog, SIGNAL(changeIsoSurfaceValue(double)), this, SLOT(isoSurfaceValueChanged(double)));
    isoSurfaceDialog->show();

}

void MainWindow::changeFloodNumber(int number)
{
    qtvtkWindow->ChangeFloodNumber(number);
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::isoSurfaceChangeFlowNumber(int number)
{
    qtvtkWindow->IsoSurfaceChangeFlowNumber(number);
    changeFloodNumber(number);
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::isoSurfaceValueChanged(double value)
{
    qtvtkWindow->SetIsoSurfaceValue(value);
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::slicesCheckBoxTriggered()
{
    if (!qtvtkWindow->HasCutplane())
    {
        cout << "test" << endl;
        qtvtkWindow->AddNewCutplane();

        if (controlPanel != nullptr) {
            // 获取当前cutplane的数量作为索引
            int cutplaneIndex = qtvtkWindow->GetPlanes().size() - 1; // 新添加的cutplane索引
            double origin[3] = {0.0, 0.0, 0.0};
            double normal[3] = {1.0, 0.0, 0.0};
            controlPanel->addCutplaneToTable(cutplaneIndex, origin, normal);
        }
        // 第一次创建cutplane时也要显示ScalarBar
        if (ui->slicesCheckBox->isChecked()) {
            qtvtkWindow->ShowCutplaneScalarBar();
        }

        cout << "add a simple cutplane" << endl;
        ui->vtkBox->renderWindow()->Render();
        return;
    }
    if (ui->slicesCheckBox->isChecked())
    {
        qtvtkWindow->AddCutplaneActors();
        qtvtkWindow->ShowCutplaneScalarBar();
    }
    else 
    {
        qtvtkWindow->RemoveCutplaneActors();
        qtvtkWindow->HideCutplaneScalarBar();
    }
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::slicesSettingButtonTriggered()
{
    if (ui->slicesCheckBox->checkState() == Qt::Unchecked)
    {
        cout << "please add slices actor first" << endl;
        return;
    }
    CutplaneDialog *cutplaneDialog = new CutplaneDialog(this);
    cutplaneDialog->setCutplaneDialog(qtvtkWindow->GetPlanes());

    double* bounds = qtvtkWindow->GetModelBounds();
    if (bounds != nullptr) {
        cutplaneDialog->setModelBounds(bounds);
    }
    
    cutplaneDialog->setAttribute(Qt::WA_DeleteOnClose);
    cutplaneDialog->setWindowModality(Qt::ApplicationModal);
    connect(cutplaneDialog, SIGNAL(finishSetParameters(double*,double*,int)),this, SLOT(changeCutplane(double*,double*,int)));
    connect(cutplaneDialog, &CutplaneDialog::createNewCutplane, this, &MainWindow::makeNewCutplane);
    connect(cutplaneDialog, &CutplaneDialog::colorMappingChanged, this, &MainWindow::updateCutplaneColorMapping);
    connect(cutplaneDialog, &CutplaneDialog::colorSchemeChanged, [this](int index){
        qtvtkWindow->SetCutplaneColorScheme(index);
        ui->vtkBox->renderWindow()->Render();
    });
    //* test
    connect(cutplaneDialog, &CutplaneDialog::sliceLocation,
            [this](double value,int axis) {
                if (qtvtkWindow) {
                    qtvtkWindow->CreatePlanePreview(value,axis);
                    ui->vtkBox->renderWindow()->Render();
                }
            });

    connect(cutplaneDialog, &QDialog::finished,
        [this]() {
            if (qtvtkWindow) {
                qtvtkWindow->HidePlanePreview();
            }
        });

    cutplaneDialog->show();
}

void MainWindow::changeCutplane(double* origin, double *normal, int cutplaneNumber)
{
    // cout << origin[0] << " " << origin[1] << " " << origin[2] << endl;
    // cout << normal[0] << " " << normal[1] << " " << normal[2] << endl;
    qtvtkWindow->SetCutplane(cutplaneNumber, origin,normal);
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::makeNewCutplane(double* origin, double* normal)
{
    qtvtkWindow->AddNewCutplane(origin, normal);

    if (controlPanel != nullptr) {
        int cutplaneIndex = qtvtkWindow->GetPlanes().size() - 1; // 新添加的cutplane索引
        controlPanel->addCutplaneToTable(cutplaneIndex, origin, normal);
    }
    
    cout << "add new cut plane with origin(" << origin[0] << ", " << origin[1] << ", " << origin[2] 
         << ") normal(" << normal[0] << ", " << normal[1] << ", " << normal[2] << ")" << endl;
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::transparancyCheckBoxTriggered()
{
    if (ui->transparancyCheckBox->isChecked()) {
        qtvtkWindow->SetActorTransparancy(0.5);
        vtkObject::GlobalWarningDisplayOff();
    }
    else {
        qtvtkWindow->SetActorTransparancy(1.0);
        vtkObject::GlobalWarningDisplayOn();
    }
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::lightingCheckBoxTriggered()
{
    qtvtkWindow->SetActorLighting(ui->lightingCheckBox->isChecked());
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::showCutplane(int number, bool flag)
{
    if (flag) qtvtkWindow->AddCutplane(number);
    else
    {
        qtvtkWindow->RemoveCutplane(number);
    }
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::InitializeMainWindow()
{
    SetIcons();
    SetvtkBox();

    connect(ui->xoyView, SIGNAL(clicked()), this, SLOT(xoyViewTriggered()));
    connect(ui->xozView, SIGNAL(clicked()), this, SLOT(xozViewTriggered()));
    connect(ui->yozView, SIGNAL(clicked()), this, SLOT(yozViewTriggered()));
    connect(ui->xyzView, SIGNAL(clicked()), this, SLOT(xyzViewTriggered()));

    connect(ui->contourSettingButton, SIGNAL(clicked()), this, SLOT(contourSettingButtonTriggered()));
    connect(ui->vectorSettingButton, SIGNAL(clicked()), this, SLOT(vectorSettingButtonTriggered()));
    connect(ui->selectBoundaryButton, SIGNAL(clicked()), this, SLOT(selectBoundaryButtonTriggeded()));
    connect(ui->IsoSurfaceSettingButton, SIGNAL(clicked()), this, SLOT(isoSurfaceSettingButtonTriggered()));
    connect(ui->addSliceButton, SIGNAL(clicked()), this, SLOT(slicesSettingButtonTriggered()));

    connect(ui->ConstHeightpushButton, SIGNAL(clicked()),this,SLOT(ConstHeightButtonTriggered()));
//    connect(ui->ConstHeightCheckBox, SIGNAL(stateChanged(int)), this, SLOT(ConstHeightCheckBoxTriggered()));
    connect(ui->MeridionalButton, SIGNAL(clicked()),this, SLOT(MeridionalButtonTriggered()));
    connect(ui->MeridionalcheckBox, SIGNAL(stateChanged(int)),this, SLOT(MeridionalCheckBoxTriggered()));

    //* Set View Control Group
    QButtonGroup *group_ViewControl = new QButtonGroup(this);
    group_ViewControl->setExclusive(true);
    group_ViewControl->addButton(ui->Check_3Dview);
    group_ViewControl->addButton(ui->Check_DoubleView);
    group_ViewControl->addButton(ui->Check_Meri);

}

void MainWindow::SetIcons()
{
    const string iconPath = ":/PostIcons/";

    //Orientation view buttons's icon
    ui->xoyView->setIcon(QIcon((iconPath+"xoy.png").c_str()));
    ui->xozView->setIcon(QIcon((iconPath+"xoz.png").c_str()));
    ui->yozView->setIcon(QIcon((iconPath+"yoz.png").c_str()));
    ui->xyzView->setIcon(QIcon((iconPath+"xyz.png").c_str()));

    ui->xoyView->setIconSize(ui->xoyView->sizeHint());
    ui->xozView->setIconSize(ui->xozView->sizeHint());
    ui->yozView->setIconSize(ui->yozView->sizeHint());
    ui->xyzView->setIconSize(ui->xyzView->sizeHint());

    ui->contourSettingButton->setIcon(QIcon((iconPath+"contour.png").c_str()));
    ui->vectorSettingButton->setIcon(QIcon((iconPath+"vector.png").c_str()));
    ui->IsoSurfaceSettingButton->setIcon(QIcon((iconPath+"isoSurface.png").c_str()));
    ui->addSliceButton->setIcon(QIcon((iconPath+"cutplane.png").c_str()));
    ui->addStreamLineButton->setIcon(QIcon((iconPath+"streamline.png").c_str()));

    ui->contourSettingButton->setIconSize(ui->contourSettingButton->sizeHint());
    ui->vectorSettingButton->setIconSize(ui->vectorSettingButton->sizeHint());
    ui->IsoSurfaceSettingButton->setIconSize(ui->IsoSurfaceSettingButton->sizeHint());
    ui->addSliceButton->setIconSize(ui->addSliceButton->sizeHint());
    ui->addStreamLineButton->setIconSize(ui->addStreamLineButton->sizeHint());

    //toolBar's icons
    ui->toolBar->setIconSize(QSize(40,40));
    ui->toolBar->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);
    ui->actionOpenFile->setIcon(QIcon((iconPath+"open.png").c_str()));
    ui->actionAddAxisActor->setIcon(QIcon((iconPath+"orient_axes.png").c_str()));
    ui->actionAddScalarBarActor->setIcon(QIcon((iconPath+"colorbar.png").c_str()));
    ui->actionAddOutlineActor->setIcon(QIcon((iconPath+"boundbox.png").c_str()));
    ui->actionAddPointInformation->setIcon(QIcon((iconPath+"text.png").c_str()));
    ui->actionCalculatorFunction->setIcon(QIcon((iconPath+"calculator.png").c_str()));
    ui->actionNewWindow->setIcon(QIcon((iconPath+"newwindow.png").c_str()));
    QIcon checkedIcon((iconPath+"open.png").c_str());
}

void MainWindow::SetvtkBox()
{
    qtvtkWindow = new vtkDisplayWindow();
    ui->vtkBox->setRenderWindow(qtvtkWindow->GetRenderWindow());
    ui->vtkBox->renderWindow()->Render();
}

void MainWindow::ResetScrollArea()
{
    ui->edgeCheckBox->setCheckState(Qt::Unchecked);
    ui->meshCheckBox->setCheckState(Qt::Unchecked);
    ui->shadeCheckBox->setCheckState(Qt::Checked);
    ui->contourCheckBox->setCheckState(Qt::Checked);
    ui->vectorCheckBox->setCheckState(Qt::Unchecked);
    ui->slicesCheckBox->setCheckState(Qt::Unchecked);
    ui->transparancyCheckBox->setCheckState(Qt::Unchecked);
    ui->lightingCheckBox->setCheckState(Qt::Checked);

    connect(ui->meshCheckBox, SIGNAL(stateChanged(int)), this, SLOT(meshCheckBoxTriggered()));
    connect(ui->contourCheckBox, SIGNAL(stateChanged(int)), this, SLOT(contourCheckBoxTriggered()));
    connect(ui->shadeCheckBox, SIGNAL(stateChanged(int)), this, SLOT(shadeCheckBoxTriggered()));
    connect(ui->edgeCheckBox, SIGNAL(stateChanged(int)), this, SLOT(edgeCheckBoxTriggered()));
    connect(ui->vectorCheckBox, SIGNAL(stateChanged(int)), this, SLOT(vectorCheckBoxTriggered()));

    ui->isoSurfaceCheckBox->setCheckState(Qt::Unchecked);

    connect(ui->isoSurfaceCheckBox, SIGNAL(stateChanged(int)), this, SLOT(isoSurfaceCheckBoxTriggered()));
    connect(ui->slicesCheckBox, SIGNAL(stateChanged(int)), this, SLOT(slicesCheckBoxTriggered()));

    connect(ui->transparancyCheckBox, SIGNAL(stateChanged(int)), this, SLOT(transparancyCheckBoxTriggered()));
    connect(ui->lightingCheckBox, SIGNAL(stateChanged(int)), this, SLOT(lightingCheckBoxTriggered()));

    ui->scrollArea->setEnabled(true);
}

void MainWindow::DisableScrollArea()
{
    disconnect(ui->meshCheckBox, SIGNAL(stateChanged(int)), this, SLOT(meshCheckBoxTriggered()));
    disconnect(ui->contourCheckBox, SIGNAL(stateChanged(int)), this, SLOT(contourCheckBoxTriggered()));
    disconnect(ui->shadeCheckBox, SIGNAL(stateChanged(int)), this, SLOT(shadeCheckBoxTriggered()));
    disconnect(ui->edgeCheckBox, SIGNAL(stateChanged(int)), this, SLOT(edgeCheckBoxTriggered()));
    disconnect(ui->vectorCheckBox, SIGNAL(stateChanged(int)), this, SLOT(vectorCheckBoxTriggered()));
    
    disconnect(ui->isoSurfaceCheckBox, SIGNAL(stateChanged(int)), this, SLOT(isoSurfaceCheckBoxTriggered()));
    disconnect(ui->slicesCheckBox, SIGNAL(stateChanged(int)), this, SLOT(slicesCheckBoxTriggered()));

    disconnect(ui->transparancyCheckBox, SIGNAL(stateChanged(int)), this, SLOT(transparancyCheckBoxTriggered()));
    disconnect(ui->lightingCheckBox, SIGNAL(stateChanged(int)), this, SLOT(lightingCheckBoxTriggered()));

    ui->scrollArea->setEnabled(false);
}


void MainWindow::MeridionalButtonTriggered()
{
    MeridionalPlaneDialog * meridionalPlaneDialog = new MeridionalPlaneDialog(this);
    meridionalPlaneDialog->show();
    meridionalPlaneDialog->setDialog(qtvtkWindow->GetFlows(), qtvtkWindow->GetCurFlowNumber());
    connect(meridionalPlaneDialog, SIGNAL(finishSetMeiridonalFlow(int)),this, SLOT(ChangeMeridionalPlaneFlow(int)));
}

void MainWindow::MeridionalCheckBoxTriggered()
{
    if(ui->MeridionalcheckBox->isChecked())
    {
        if(qtvtkWindow->MeridionalPlaneActor.empty())
        {
            Meridionalrenderer->SetBackground(1.0, 1.0, 1.0);
            Meridionalrenderer->SetBackground2(0.529, 0.8078, 0.92157);
            Meridionalrenderer->SetGradientBackground(true);
            MeridionalrenderWindow->AddRenderer(Meridionalrenderer);
            vtkWidget->setRenderWindow(MeridionalrenderWindow);
            ui->VTKLayout->insertWidget(1,vtkWidget);
            auto plane = qtvtkWindow->CreateMeridionalPlane(0, 10);
            for(int i = 0; i < plane.size();i++)
            {
                Meridionalrenderer->AddActor(plane[i]);
            }
            MeridionalrenderWindow->Render();
        }
        else{
            vtkWidget->show();
        }
    }
    else{
        vtkWidget->hide();
    }
}

void MainWindow::on_ConstHeightCheckBox_toggled(bool trigger)
{
    if (trigger) {
        ConstHeightPlaneDialog *constheightdialog = new ConstHeightPlaneDialog(this);
        constheightdialog->show();
        connect(constheightdialog, SIGNAL(finishSetParameters(double)), this, SLOT(AddConstHeightPlane(double)));
    }
    else
    {
        qtvtkWindow->RemoveConstHeight();
        ui->vtkBox->renderWindow()->Render();
    }
}

void MainWindow::ConstHeightButtonTriggered()
{
    ConstSettingDialog * settingDialog = new ConstSettingDialog(this);
    settingDialog->setConstSettingDialog(qtvtkWindow->GetFlows(), qtvtkWindow->GetCurFlowNumber());
    settingDialog->show();
    connect(settingDialog,SIGNAL(finishSetHeight(double)),this, SLOT(AddConstHeightPlane(double)));
    connect(settingDialog,SIGNAL(finishSetFlow(int)),this, SLOT(ChangeConstHeightFlow(int)));
}
void MainWindow::AddConstHeightPlane(double height)
{
    qtvtkWindow->CreateConstHeight(height);
}

void MainWindow::ChangeConstHeightFlow(int flow)
{
    qtvtkWindow->ChangeConstHeightFlow(flow);
}

void MainWindow::ChangeMeridionalPlaneFlow(int flow)
{
    auto plane = qtvtkWindow->ChangeMeridionalFlow(0, 1, flow);
    Meridionalrenderer->RemoveAllViewProps();
    for(int i = 0; i < plane.size(); i++)
    {
        Meridionalrenderer->AddActor(plane[i]);
    }
    MeridionalrenderWindow->Render();
}

void MainWindow::updateCutplaneColorMapping(double minValue, double maxValue, int numberOfColors,bool isBaned)
{
    qtvtkWindow->SetCutplaneColorMapping(minValue, maxValue, numberOfColors,isBaned);
    ui->vtkBox->renderWindow()->Render();
}

//* View Control Functions
void MainWindow::on_Check_3Dview_toggled(bool checked)
{
    if (checked)
    {
        // 显示3D视图模式
        // 隐藏Meridional视图
        if (vtkWidget)
        {
            vtkWidget->hide();
        }
        
        // 确保主VTK窗口可见
        ui->vtkBox->show();
        ui->vtkBox->renderWindow()->Render();
        
        qDebug() << "Switched to 3D View mode";
    }
}

void MainWindow::on_Check_DoubleView_toggled(bool checked)
{
    if (checked)
    {
        // 显示双视图模式（3D + Meridional）
        // 显示主3D视图
        ui->vtkBox->show();
        
        // 显示Meridional视图
        if (qtvtkWindow->MeridionalPlaneActor.empty())
        {
            // 如果还没有创建Meridional视图，则创建它
            Meridionalrenderer->SetBackground(1.0, 1.0, 1.0);
            Meridionalrenderer->SetBackground2(0.529, 0.8078, 0.92157);
            Meridionalrenderer->SetGradientBackground(true);
            MeridionalrenderWindow->AddRenderer(Meridionalrenderer);
            vtkWidget->setRenderWindow(MeridionalrenderWindow);
            ui->VTKLayout->insertWidget(1, vtkWidget);
            
            auto plane = qtvtkWindow->CreateMeridionalPlane(0, 10);
            for (int i = 0; i < plane.size(); i++)
            {
                Meridionalrenderer->AddActor(plane[i]);
            }
            MeridionalrenderWindow->Render();
        }
        else
        {
            // 如果已经创建，则显示
            vtkWidget->show();
        }
        
        // 渲染两个视图
        ui->vtkBox->renderWindow()->Render();
        MeridionalrenderWindow->Render();
        
        qDebug() << "Switched to Double View mode";
    }
}

void MainWindow::on_Check_Meri_toggled(bool checked)
{
    if (checked)
    {
        // 显示Meridional视图模式
        // 隐藏主3D视图
        ui->vtkBox->hide();
        
        // 显示Meridional视图
        if (qtvtkWindow->MeridionalPlaneActor.empty())
        {
            // 如果还没有创建Meridional视图，则创建它
            Meridionalrenderer->SetBackground(1.0, 1.0, 1.0);
            Meridionalrenderer->SetBackground2(0.529, 0.8078, 0.92157);
            Meridionalrenderer->SetGradientBackground(true);
            MeridionalrenderWindow->AddRenderer(Meridionalrenderer);
            vtkWidget->setRenderWindow(MeridionalrenderWindow);
            ui->VTKLayout->insertWidget(1, vtkWidget);
            
            auto plane = qtvtkWindow->CreateMeridionalPlane(0, 10);
            for (int i = 0; i < plane.size(); i++)
            {
                Meridionalrenderer->AddActor(plane[i]);
            }
            MeridionalrenderWindow->Render();
        }
        else
        {
            // 如果已经创建，则显示
            vtkWidget->show();
        }
        
        MeridionalrenderWindow->Render();
        
        qDebug() << "Switched to Meridional View mode";
    }
}